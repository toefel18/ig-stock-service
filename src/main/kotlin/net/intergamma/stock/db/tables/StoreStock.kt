/*
 * This file is generated by jOOQ.
 */
package net.intergamma.stock.db.tables


import java.time.OffsetDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import net.intergamma.stock.db.Public
import net.intergamma.stock.db.keys.STORE_STOCK_PKEY
import net.intergamma.stock.db.keys.STORE_STOCK_RESERVATION__STORE_STOCK_RESERVATION_STORE_ID_PRODUCT_ID_FKEY
import net.intergamma.stock.db.keys.STORE_STOCK_UKEY
import net.intergamma.stock.db.tables.StoreStockReservation.StoreStockReservationPath
import net.intergamma.stock.db.tables.records.StoreStockRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * Stock of a product in a store
 */
@Suppress("UNCHECKED_CAST")
open class StoreStock(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, StoreStockRecord>?,
    parentPath: InverseForeignKey<out Record, StoreStockRecord>?,
    aliased: Table<StoreStockRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<StoreStockRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("Stock of a product in a store"),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.store_stock</code>
         */
        val STORE_STOCK: StoreStock = StoreStock()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<StoreStockRecord> = StoreStockRecord::class.java

    /**
     * The column <code>public.store_stock.id</code>. System generated primary
     * key column
     */
    val ID: TableField<StoreStockRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "System generated primary key column")

    /**
     * The column <code>public.store_stock.store_id</code>. The ID of the store
     * in which the product is available
     */
    val STORE_ID: TableField<StoreStockRecord, String?> = createField(DSL.name("store_id"), SQLDataType.CLOB.nullable(false), this, "The ID of the store in which the product is available")

    /**
     * The column <code>public.store_stock.product_id</code>. The ID of the
     * product in the store
     */
    val PRODUCT_ID: TableField<StoreStockRecord, String?> = createField(DSL.name("product_id"), SQLDataType.CLOB.nullable(false), this, "The ID of the product in the store")

    /**
     * The column <code>public.store_stock.stock</code>. Stock of the product in
     * the store
     */
    val STOCK: TableField<StoreStockRecord, Long?> = createField(DSL.name("stock"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "Stock of the product in the store")

    /**
     * The column <code>public.store_stock.created_timestamp_utc</code>.
     * Metadata, timestamp when the stock record was created
     */
    val CREATED_TIMESTAMP_UTC: TableField<StoreStockRecord, OffsetDateTime?> = createField(DSL.name("created_timestamp_utc"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("(now() AT TIME ZONE 'UTC'::text)"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Metadata, timestamp when the stock record was created")

    /**
     * The column <code>public.store_stock.modified_timestamp_utc</code>.
     * Metadata, timestamp when the stock record was last updated
     */
    val MODIFIED_TIMESTAMP_UTC: TableField<StoreStockRecord, OffsetDateTime?> = createField(DSL.name("modified_timestamp_utc"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("(now() AT TIME ZONE 'UTC'::text)"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Metadata, timestamp when the stock record was last updated")

    private constructor(alias: Name, aliased: Table<StoreStockRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<StoreStockRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<StoreStockRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.store_stock</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.store_stock</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.store_stock</code> table reference
     */
    constructor(): this(DSL.name("store_stock"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, StoreStockRecord>?, parentPath: InverseForeignKey<out Record, StoreStockRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, STORE_STOCK, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class StoreStockPath : StoreStock, Path<StoreStockRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, StoreStockRecord>?, parentPath: InverseForeignKey<out Record, StoreStockRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<StoreStockRecord>): super(alias, aliased)
        override fun `as`(alias: String): StoreStockPath = StoreStockPath(DSL.name(alias), this)
        override fun `as`(alias: Name): StoreStockPath = StoreStockPath(alias, this)
        override fun `as`(alias: Table<*>): StoreStockPath = StoreStockPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<StoreStockRecord, Long?> = super.getIdentity() as Identity<StoreStockRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<StoreStockRecord> = STORE_STOCK_PKEY
    override fun getUniqueKeys(): List<UniqueKey<StoreStockRecord>> = listOf(STORE_STOCK_UKEY)

    private lateinit var _storeStockReservation: StoreStockReservationPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.store_stock_reservation</code> table
     */
    fun storeStockReservation(): StoreStockReservationPath {
        if (!this::_storeStockReservation.isInitialized)
            _storeStockReservation = StoreStockReservationPath(this, null, STORE_STOCK_RESERVATION__STORE_STOCK_RESERVATION_STORE_ID_PRODUCT_ID_FKEY.inverseKey)

        return _storeStockReservation;
    }

    val storeStockReservation: StoreStockReservationPath
        get(): StoreStockReservationPath = storeStockReservation()
    override fun `as`(alias: String): StoreStock = StoreStock(DSL.name(alias), this)
    override fun `as`(alias: Name): StoreStock = StoreStock(alias, this)
    override fun `as`(alias: Table<*>): StoreStock = StoreStock(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): StoreStock = StoreStock(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): StoreStock = StoreStock(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): StoreStock = StoreStock(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): StoreStock = StoreStock(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): StoreStock = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): StoreStock = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): StoreStock = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): StoreStock = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): StoreStock = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): StoreStock = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): StoreStock = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): StoreStock = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): StoreStock = where(DSL.notExists(select))
}
